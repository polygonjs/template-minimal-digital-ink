import {loadScene_scene_01} from './loadScene.js';

export const createSceneAndMount_scene_01 = async function (options={}) {
	if(options && options.createViewer == null){
		options.createViewer = true;
	}
	options.sceneData = {"properties":{"frame":0,"maxFrame":600,"maxFrameLocked":false,"realtimeState":true,"mainCameraPath":"/cameras/cameras:sopGroup/perspectiveCamera_MAIN","versions":{"polygonjs":"1.2.23"}},"root":{"type":"root","nodes":{"cameras":{"type":"geo","nodes":{"perspectiveCamera_MAIN":{"type":"perspectiveCamera","params":{"position":[0,0,4.9]}},"perspectiveCamera_DEBUG":{"type":"perspectiveCamera","params":{"position":[0,0,5]}},"merge1":{"type":"merge","inputs":["cameraControls1","perspectiveCamera_MAIN"],"flags":{"display":true}},"cameraControls1":{"type":"cameraControls","nodes":{"cameraOrbitControls1":{"type":"cameraOrbitControls","params":{"target":[0.08973345213304776,-0.23130649469394027,-0.9083223890450818]}}},"params":{"node":"cameraOrbitControls1"},"inputs":["perspectiveCamera_DEBUG"]}},"flags":{"display":true}},"lights":{"type":"geo","nodes":{"spotLight1":{"type":"spotLight"},"polarTransform1":{"type":"polarTransform","params":{"longitude":-165.6,"latitude":18,"depth":8},"inputs":["spotLight1"],"flags":{"display":true}}},"flags":{"display":true}},"ink":{"type":"geo","nodes":{"material3":{"type":"material","params":{"material":"../MAT/rayMarchingBuilder1"},"inputs":["box1"]},"box1":{"type":"box","params":{"size":8}},"MAT":{"type":"materialsNetwork","nodes":{"rayMarchingBuilder1":{"type":"rayMarchingBuilder","nodes":{"globals1":{"type":"globals"},"output1":{"type":"output","inputs":[{"index":0,"node":"SDFContext1","output":"SDFContext"}]},"SDFContext1":{"type":"SDFContext","params":{"sdf":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"material":{"type":"string","default_value":"DefaultSDFMaterial()","options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"SDFUnion5","output":"union"},{"index":1,"node":"SDFMaterial1","output":"SDFMaterial"}],"connection_points":{"in":[{"name":"sdf","type":"float"},{"name":"material","type":"SDFMaterial"}],"out":[{"name":"SDFContext","type":"SDFContext"}]}},"SDFMaterial1":{"type":"SDFMaterial","params":{"color":{"overriden_options":{}},"useEnvMap":1,"envMapTint":{"overriden_options":{}},"envMapIntensity":{"overriden_options":{}},"envMapFresnel":{"raw_input":1,"overriden_options":{}},"envMapFresnelPower":{"raw_input":2.6,"overriden_options":{}},"reflectionTint":{"overriden_options":{}},"reflectivity":{"overriden_options":{}},"reflectionBiasMult":{"overriden_options":{}},"refractionTint":{"overriden_options":{}},"ior":{"overriden_options":{}},"iorOffset":{"overriden_options":{}},"transmission":{"overriden_options":{}},"absorption":{"overriden_options":{}},"refractionMaxDist":{"overriden_options":{}},"refractionBiasMult":{"overriden_options":{}},"refractionStartOutsideMedium":{"overriden_options":{}}},"inputs":[{"index":0,"node":"constant1","output":"val"}]},"SDFSphere1":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[-0.1,5.2,0],"overriden_options":{}},"radius":{"raw_input":0.46,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals2","output":"position"},{"index":1,"node":"floatToVec3_2","output":"vec3"},{"index":2,"node":"multAdd17","output":"val"}]},"SDFSphere2":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[0.1,4.6,0],"overriden_options":{}},"radius":{"raw_input":0.36,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals1","output":"position"},{"index":1,"node":"floatToVec3_1","output":"vec3"},{"index":2,"node":"multAdd18","output":"val"}]},"SDFUnion1":{"type":"SDFUnion","params":{"smooth":{"overriden_options":{}},"sdf0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sdf1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"smoothFactor":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.3}},"inputs":[{"index":0,"node":"SDFSphere1","output":"float"},{"index":1,"node":"SDFSphere2","output":"float"}],"connection_points":{"in":[{"name":"sdf0","type":"float"},{"name":"sdf1","type":"float"},{"name":"smoothFactor","type":"float"}],"out":[{"name":"union","type":"float"}]}},"constant1":{"type":"constant","params":{"type":4,"color":[1,1,1],"asColor":1},"connection_points":{"in":[],"out":[{"name":"val","type":"vec3"}]}},"sin1":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd1","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd1":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":-1.7},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals1","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd2":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin1","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"floatToVec3_1":{"type":"floatToVec3","params":{"x":{"overriden_options":{}},"y":{"overriden_options":{}},"z":{"overriden_options":{}}},"inputs":[{"index":0,"node":"multAdd10","output":"val"},{"index":1,"node":"multAdd2","output":"val"}]},"sin2":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd3","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd3":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":1.6},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.6},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals2","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd4":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin2","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"floatToVec3_2":{"type":"floatToVec3","params":{"x":{"overriden_options":{}},"y":{"overriden_options":{}},"z":{"overriden_options":{}}},"inputs":[{"index":0,"node":"multAdd6","output":"val"},{"index":1,"node":"multAdd4","output":"val"},{"index":2,"node":"multAdd8","output":"val"}]},"sin3":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd5","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd5":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":-3.5},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.37},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals2","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd6":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.35},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin3","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"sin4":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd7","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd7":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.5},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.16},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals2","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd8":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":1.2},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"sin5":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd9","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd9":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":4.6},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.88},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals1","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd10":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.31},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin5","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"globals2":{"type":"globals"},"globals3":{"type":"globals"},"SDFSphere3":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[0.1,4.6,0],"overriden_options":{}},"radius":{"raw_input":0.36,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals3","output":"position"},{"index":1,"node":"floatToVec3_3","output":"vec3"},{"index":2,"node":"multAdd19","output":"val"}]},"sin6":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd11","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd11":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":-13.700000000000001},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.2},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals3","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd12":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true}},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin6","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"floatToVec3_3":{"type":"floatToVec3","params":{"x":{"overriden_options":{}},"y":{"overriden_options":{}},"z":{"overriden_options":{}}},"inputs":[{"index":0,"node":"multAdd14","output":"val"},{"index":1,"node":"multAdd12","output":"val"},{"index":2,"node":"multAdd16","output":"val"}]},"sin7":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd13","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd13":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.31},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.64},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals3","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd14":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.31},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin7","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"SDFUnion2":{"type":"SDFUnion","params":{"smooth":{"overriden_options":{}},"sdf0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sdf1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"smoothFactor":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.25}},"inputs":[{"index":0,"node":"SDFUnion1","output":"union"},{"index":1,"node":"SDFSphere3","output":"float"}],"connection_points":{"in":[{"name":"sdf0","type":"float"},{"name":"sdf1","type":"float"},{"name":"smoothFactor","type":"float"}],"out":[{"name":"union","type":"float"}]}},"sin8":{"type":"sin","params":{"radians":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}}},"inputs":[{"index":0,"node":"multAdd15","output":"val"}],"connection_points":{"in":[{"name":"radians","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd15":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":-1.7},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":1.3},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"globals3","output":"time"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd16":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.53},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"sin8","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"SDFSphere4":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[0.1,4.6,0],"overriden_options":{}},"radius":{"raw_input":0.36,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals4","output":"position"},{"index":1,"node":"param1","output":"val"},{"index":2,"node":"multAdd20","output":"val"}]},"SDFUnion3":{"type":"SDFUnion","params":{"smooth":{"overriden_options":{}},"sdf0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sdf1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"smoothFactor":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.28}},"inputs":[{"index":0,"node":"SDFUnion2","output":"union"},{"index":1,"node":"SDFSphere4","output":"float"}],"connection_points":{"in":[{"name":"sdf0","type":"float"},{"name":"sdf1","type":"float"},{"name":"smoothFactor","type":"float"}],"out":[{"name":"union","type":"float"}]}},"param1":{"type":"param","params":{"name":"pos1","type":4},"connection_points":{"in":[],"out":[{"name":"val","type":"vec3"}]}},"SDFSphere5":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[0.1,4.6,0],"overriden_options":{}},"radius":{"raw_input":0.2,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals5","output":"position"},{"index":1,"node":"param2","output":"val"},{"index":2,"node":"multAdd21","output":"val"}]},"param2":{"type":"param","params":{"name":"pos2","type":4},"connection_points":{"in":[],"out":[{"name":"val","type":"vec3"}]}},"globals5":{"type":"globals"},"SDFUnion4":{"type":"SDFUnion","params":{"smooth":{"overriden_options":{}},"sdf0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sdf1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"smoothFactor":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.28}},"inputs":[{"index":0,"node":"SDFUnion3","output":"union"},{"index":1,"node":"SDFSphere5","output":"float"}],"connection_points":{"in":[{"name":"sdf0","type":"float"},{"name":"sdf1","type":"float"},{"name":"smoothFactor","type":"float"}],"out":[{"name":"union","type":"float"}]}},"SDFSphere6":{"type":"SDFSphere","params":{"position":{"overriden_options":{}},"center":{"raw_input":[0.1,4.6,0],"overriden_options":{}},"radius":{"raw_input":0.2,"overriden_options":{}}},"inputs":[{"index":0,"node":"globals6","output":"position"},{"index":1,"node":"param3","output":"val"},{"index":2,"node":"multAdd22","output":"val"}]},"param3":{"type":"param","params":{"name":"pos3","type":4},"connection_points":{"in":[],"out":[{"name":"val","type":"vec3"}]}},"globals6":{"type":"globals"},"SDFUnion5":{"type":"SDFUnion","params":{"smooth":{"overriden_options":{}},"sdf0":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"sdf1":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"smoothFactor":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.28}},"inputs":[{"index":0,"node":"SDFUnion4","output":"union"},{"index":1,"node":"SDFSphere6","output":"float"}],"connection_points":{"in":[{"name":"sdf0","type":"float"},{"name":"sdf1","type":"float"},{"name":"smoothFactor","type":"float"}],"out":[{"name":"union","type":"float"}]}},"globals4":{"type":"globals"},"param4":{"type":"param","params":{"name":"radiusMult"},"connection_points":{"in":[],"out":[{"name":"val","type":"float"}]}},"multAdd17":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.46},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd18":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.36},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd19":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.36},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd20":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.36},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd21":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.2},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}},"multAdd22":{"type":"multAdd","params":{"value":{"type":"float","default_value":0,"options":{"spare":true,"editable":false}},"preAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}},"mult":{"type":"float","default_value":1,"options":{"spare":true,"editable":true},"raw_input":0.2},"postAdd":{"type":"float","default_value":0,"options":{"spare":true,"editable":true}}},"inputs":[{"index":0,"node":"param4","output":"val"}],"connection_points":{"in":[{"name":"value","type":"float"},{"name":"preAdd","type":"float"},{"name":"mult","type":"float"},{"name":"postAdd","type":"float"}],"out":[{"name":"val","type":"float"}]}}},"params":{"envTexture1":{"type":"node_path","default_value":"","options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true,"nodeSelection":{"context":"cop"}},"raw_input":"../../COP/imageEXR_envMap","overriden_options":{"callback":"{}","nodeSelection":"{\"context\":\"cop\"}"}},"pos1":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true},"overriden_options":{"callback":"{}"}},"pos2":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true},"overriden_options":{"callback":"{}"}},"pos3":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true},"overriden_options":{"callback":"{}"}},"radiusMult":{"type":"float","default_value":0,"options":{"spare":true,"computeOnDirty":true,"cook":false,"dependentOnFoundNode":true},"raw_input":1,"overriden_options":{"callback":"{}"}}},"persisted_config":{"material":{"metadata":{"version":4.5,"type":"Material","generator":"Material.toJSON"},"uuid":"/ink/MAT/rayMarchingBuilder1-main","type":"ShaderMaterial","name":"/ink/MAT/rayMarchingBuilder1","color":16777215,"transparent":true,"depthFunc":3,"depthTest":true,"depthWrite":true,"colorWrite":true,"stencilWrite":false,"stencilWriteMask":255,"stencilFunc":519,"stencilRef":0,"stencilFuncMask":255,"stencilFail":7680,"stencilZFail":7680,"stencilZPass":7680,"alphaTest":0.5,"fog":false,"glslVersion":null,"uniforms":{"diffuse":{"type":"c","value":16777215},"opacity":{"value":1},"map":{"value":null},"uvTransform":{"type":"m3","value":[1,0,0,0,1,0,0,0,1]},"uv2Transform":{"type":"m3","value":[1,0,0,0,1,0,0,0,1]},"alphaMap":{"value":null},"alphaTest":{"value":0},"envMap":{"value":null},"flipEnvMap":{"value":-1},"reflectivity":{"value":1},"ior":{"value":1.5},"refractionRatio":{"value":0.98},"aoMap":{"value":null},"aoMapIntensity":{"value":1},"lightMap":{"value":null},"lightMapIntensity":{"value":1},"emissiveMap":{"value":null},"bumpMap":{"value":null},"bumpScale":{"value":1},"normalMap":{"value":null},"normalScale":{"type":"v2","value":[1,1]},"displacementMap":{"value":null},"displacementScale":{"value":1},"displacementBias":{"value":0},"roughnessMap":{"value":null},"metalnessMap":{"value":null},"fogDensity":{"value":0.00025},"fogNear":{"value":1},"fogFar":{"value":2000},"fogColor":{"type":"c","value":16777215},"ambientLightColor":{"value":[0,0,0]},"lightProbe":{"value":[{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0},{"x":0,"y":0,"z":0}]},"directionalLights":{"value":[]},"directionalLightShadows":{"value":[]},"directionalShadowMap":{"value":[]},"directionalShadowMatrix":{"value":[]},"spotLights":{"value":[{"position":{"x":-1.8945102831759817,"y":2.4752261249433287,"z":-12.278630388990798},"direction":{"x":-0.23651813772484168,"y":0.3090169943749476,"z":-0.9211773269651433},"color":16777215,"distance":100,"coneCos":0.7071067811865476,"penumbraCos":0.7604059656000309,"decay":0.1}]},"spotLightShadows":{"value":[]},"spotLightMap":{"value":[]},"spotShadowMap":{"value":[]},"spotLightMatrix":{"value":[{"elements":[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]}]},"pointLights":{"value":[]},"pointLightShadows":{"value":[]},"pointShadowMap":{"value":[]},"pointShadowMatrix":{"value":[]},"hemisphereLights":{"value":[]},"rectAreaLights":{"value":[]},"ltc_1":{"value":null},"ltc_2":{"value":null},"emissive":{"type":"c","value":0},"roughness":{"value":1},"metalness":{"value":0},"envMapIntensity":{"value":1},"MAX_STEPS":{"value":100},"MAX_DIST":{"value":100},"SURF_DIST":{"value":0.001},"NORMALS_BIAS":{"value":0.01},"CENTER":{"type":"v3","value":[0,0,0]},"spotLightsRayMarching":{"value":[{"worldPos":{"x":-1.8945102831759817,"y":2.4752261249433287,"z":-7.378630388990797},"direction":{"x":-0.23888331910209004,"y":0.312107164318697,"z":-0.9303891002347946}}]},"directionalLightsRayMarching":{"value":[]},"hemisphereLightsRayMarching":{"value":[]},"pointLightsRayMarching":{"value":[]},"v_POLY_texture_envTexture1":{"value":null},"v_POLY_param_pos1":{"type":"v3","value":[-2.7369523288105415,-8.012807324692961,-1.7466759067957624e-138]},"v_POLY_param_pos2":{"type":"v3","value":[-2.3004057767823607,-7.156983016351798,-4.9551060986301146e-49]},"v_POLY_param_pos3":{"type":"v3","value":[-0.6672191043260667,-2.762310030087494,-5.567396820452793e-23]},"v_POLY_param_radiusMult":{"value":1},"time":{"value":0}},"vertexShader":"precision highp float;\nprecision highp int;\n\nvarying vec3 vPw;\n\n#include <common>\n\n\n\n// /ink/MAT/rayMarchingBuilder1/globals2\nuniform float time;\n\n\n\n\n\nvoid main()\t{\n\n\tvPw = (modelMatrix * vec4( position, 1.0 )).xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}","fragmentShader":"precision highp float;\nprecision highp int;\n\n// --- applyMaterial constants definition\nuniform int MAX_STEPS;\nuniform float MAX_DIST;\nuniform float SURF_DIST;\nuniform float NORMALS_BIAS;\nuniform vec3 CENTER;\n#define ZERO 0\n\n#include <common>\n\n\n\n// /ink/MAT/rayMarchingBuilder1/SDFSphere4\n// https://iquilezles.org/articles/distfunctions/\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n/*\n*\n* SDF PRIMITIVES\n*\n*/\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 q = abs(p) - b*0.5;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n\tvec3 q = abs(p) - b*0.5;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n\t\tp = abs(p  )-b*0.5;\n\tvec3 q = abs(p+e)-e;\n\treturn min(min(\n\t\tlength(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n\t\tlength(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n\t\tlength(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n\tp.y -= clamp( p.y, 0.0, h );\n\treturn length( p ) - r;\n}\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n\t// c is the sin/cos of the angle, h is height\n\t// Alternatively pass q instead of (c,h),\n\t// which is the point at the base in 2D\n\tvec2 q = h*vec2(c.x/c.y,-1.0);\n\n\tvec2 w = vec2( length(p.xz), p.y );\n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n\tvec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n\tfloat k = sign( q.y );\n\tfloat d = min(dot( a, a ),dot(b, b));\n\tfloat s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\nfloat sdConeWrapped(vec3 pos, float angle, float height){\n\treturn sdCone(pos, vec2(sin(angle), cos(angle)), height);\n}\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n\tfloat b = (r1-r2)/h;\n\tfloat a = sqrt(1.0-b*b);\n\n\tvec2 q = vec2( length(p.xz), p.y );\n\tfloat k = dot(q,vec2(-b,a));\n\tif( k<0.0 ) return length(q) - r1;\n\tif( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n\treturn dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n\t// n must be normalized\n\treturn dot(p,n) + h;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n\tp.x = abs(p.x);\n\tfloat k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n\treturn sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float radius)\n{\n\tvec2 p = vec2( length(pos.xz), pos.y );\n\tfloat l = length(p) - radius;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,radius) );\n\treturn max(l,m*sign(c.y*p.x-c.x*p.y));\n}\nfloat sdSolidAngleWrapped(vec3 pos, float angle, float radius){\n\treturn sdSolidAngle(pos, vec2(sin(angle), cos(angle)), radius);\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n/*\n*\n* SDF OPERATIONS\n*\n*/\nfloat SDFUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat SDFSubtract( float d1, float d2 ) { return max(-d1,d2); }\nfloat SDFIntersect( float d1, float d2 ) { return max(d1,d2); }\n\nfloat SDFSmoothUnion( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\treturn mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat SDFSmoothSubtract( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\treturn mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat SDFSmoothIntersect( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\treturn mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nvec4 SDFElongateFast( in vec3 p, in vec3 h )\n{\n\treturn vec4( p-clamp(p,-h,h), 0.0 );\n}\nvec4 SDFElongateSlow( in vec3 p, in vec3 h )\n{\n\tvec3 q = abs(p)-h;\n\treturn vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\nfloat SDFOnion( in float sdf, in float thickness )\n{\n\treturn abs(sdf)-thickness;\n}\n\n// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\nconst int _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1 = 316;\n\nstruct EnvMap {\n\tvec3 tint;\n\tfloat intensity;\n\tfloat fresnel;\n\tfloat fresnelPower;\n};\nvec3 envMapSample(vec3 rayDir, sampler2D map){\n\t// http://www.pocketgl.com/reflections/\n\tvec2 uv = vec2( atan( -rayDir.z, -rayDir.x ) * RECIPROCAL_PI2 + 0.5, rayDir.y * 0.5 + 0.5 );\n\tvec3 env = texture2D(map, uv).rgb;\n\treturn env;\n}\nvec3 envMapSampleWithFresnel(vec3 rayDir, sampler2D map, EnvMap envMap, vec3 n, vec3 cameraPosition){\n\t// http://www.pocketgl.com/reflections/\n\tvec3 env = envMapSample(rayDir, map).rgb;\n\tfloat fresnel = pow(1.-dot(normalize(cameraPosition), n), envMap.fresnelPower);\n\tfloat fresnelFactor = (1.-envMap.fresnel) + envMap.fresnel*fresnel;\n\treturn env * envMap.tint * envMap.intensity * fresnelFactor;\n}\n\n\n\n\n\n\n\n// /ink/MAT/rayMarchingBuilder1/globals2\nuniform float time;\n\n// /ink/MAT/rayMarchingBuilder1/param4\nuniform float v_POLY_param_radiusMult;\n\n// /ink/MAT/rayMarchingBuilder1/param1\nuniform vec3 v_POLY_param_pos1;\n\n// /ink/MAT/rayMarchingBuilder1/param2\nuniform vec3 v_POLY_param_pos2;\n\n// /ink/MAT/rayMarchingBuilder1/param3\nuniform vec3 v_POLY_param_pos3;\n\n// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\nuniform sampler2D v_POLY_texture_envTexture1;\n\n\n\n\n#include <lightmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n\n\n\n// uniform vec3 u_BoundingBoxMin;\n// uniform vec3 u_BoundingBoxMax;\n\n\nvarying vec3 vPw;\n\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLightRayMarching {\n\t\tvec3 worldPos;\n\t\tvec3 direction;\n\t};\n\tuniform SpotLightRayMarching spotLightsRayMarching[ NUM_SPOT_LIGHTS ];\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLightRayMarching {\n\t\tvec3 direction;\n\t};\n\tuniform DirectionalLightRayMarching directionalLightsRayMarching[ NUM_DIR_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLightRayMarching {\n\t\tvec3 direction;\n\t};\n\tuniform HemisphereLightRayMarching hemisphereLightsRayMarching[ NUM_HEMI_LIGHTS ];\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLightRayMarching {\n\t\tvec3 worldPos;\n\t};\n\tuniform PointLightRayMarching pointLightsRayMarching[ NUM_POINT_LIGHTS ];\n#endif\n\n\nstruct SDFContext {\n\tfloat d;\n\tint matId;\n};\n\nSDFContext DefaultSDFContext(){\n\treturn SDFContext( 0.0, 0 );\n}\nint DefaultSDFMaterial(){\n\treturn 0;\n}\n\n\n\nSDFContext GetDist(vec3 p) {\n\tSDFContext sdfContext = SDFContext(0.0, 0);\n\n\t// start GetDist builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/globals2\n\tvec3 v_POLY_globals2_position = p;\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param4\n\tfloat v_POLY_param4_val = v_POLY_param_radiusMult;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals1\n\tvec3 v_POLY_globals1_position = p;\n\tfloat v_POLY_globals1_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals3\n\tvec3 v_POLY_globals3_position = p;\n\tfloat v_POLY_globals3_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals4\n\tvec3 v_POLY_globals4_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param1\n\tvec3 v_POLY_param1_val = v_POLY_param_pos1;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals5\n\tvec3 v_POLY_globals5_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param2\n\tvec3 v_POLY_param2_val = v_POLY_param_pos2;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals6\n\tvec3 v_POLY_globals6_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param3\n\tvec3 v_POLY_param3_val = v_POLY_param_pos3;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd5\n\tfloat v_POLY_multAdd5_val = (0.37*(v_POLY_globals2_time + -3.5)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.6*(v_POLY_globals2_time + 1.6)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd7\n\tfloat v_POLY_multAdd7_val = (0.16*(v_POLY_globals2_time + 0.5)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd17\n\tfloat v_POLY_multAdd17_val = (0.46*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd18\n\tfloat v_POLY_multAdd18_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd19\n\tfloat v_POLY_multAdd19_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd20\n\tfloat v_POLY_multAdd20_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd21\n\tfloat v_POLY_multAdd21_val = (0.2*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd22\n\tfloat v_POLY_multAdd22_val = (0.2*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd9\n\tfloat v_POLY_multAdd9_val = (0.88*(v_POLY_globals1_time + 4.6)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_globals1_time + -1.7)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd13\n\tfloat v_POLY_multAdd13_val = (0.64*(v_POLY_globals3_time + 0.31)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd11\n\tfloat v_POLY_multAdd11_val = (0.2*(v_POLY_globals3_time + -13.700000000000001)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd15\n\tfloat v_POLY_multAdd15_val = (1.3*(v_POLY_globals3_time + -1.7)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin3\n\tfloat v_POLY_sin3_val = sin(v_POLY_multAdd5_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin2\n\tfloat v_POLY_sin2_val = sin(v_POLY_multAdd3_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin4\n\tfloat v_POLY_sin4_val = sin(v_POLY_multAdd7_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere4\n\tfloat v_POLY_SDFSphere4_float = sdSphere(v_POLY_globals4_position - v_POLY_param1_val, v_POLY_multAdd20_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere5\n\tfloat v_POLY_SDFSphere5_float = sdSphere(v_POLY_globals5_position - v_POLY_param2_val, v_POLY_multAdd21_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere6\n\tfloat v_POLY_SDFSphere6_float = sdSphere(v_POLY_globals6_position - v_POLY_param3_val, v_POLY_multAdd22_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin5\n\tfloat v_POLY_sin5_val = sin(v_POLY_multAdd9_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin1\n\tfloat v_POLY_sin1_val = sin(v_POLY_multAdd1_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin7\n\tfloat v_POLY_sin7_val = sin(v_POLY_multAdd13_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin6\n\tfloat v_POLY_sin6_val = sin(v_POLY_multAdd11_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin8\n\tfloat v_POLY_sin8_val = sin(v_POLY_multAdd15_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd6\n\tfloat v_POLY_multAdd6_val = (0.35*(v_POLY_sin3_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd4\n\tfloat v_POLY_multAdd4_val = (1.0*(v_POLY_sin2_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd8\n\tfloat v_POLY_multAdd8_val = (1.2*(v_POLY_sin4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd10\n\tfloat v_POLY_multAdd10_val = (0.31*(v_POLY_sin5_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd2\n\tfloat v_POLY_multAdd2_val = (1.0*(v_POLY_sin1_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd14\n\tfloat v_POLY_multAdd14_val = (0.31*(v_POLY_sin7_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd12\n\tfloat v_POLY_multAdd12_val = (1.0*(v_POLY_sin6_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd16\n\tfloat v_POLY_multAdd16_val = (0.53*(v_POLY_sin8_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(v_POLY_multAdd6_val, v_POLY_multAdd4_val, v_POLY_multAdd8_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_multAdd10_val, v_POLY_multAdd2_val, 0.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_3\n\tvec3 v_POLY_floatToVec3_3_vec3 = vec3(v_POLY_multAdd14_val, v_POLY_multAdd12_val, v_POLY_multAdd16_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere1\n\tfloat v_POLY_SDFSphere1_float = sdSphere(v_POLY_globals2_position - v_POLY_floatToVec3_2_vec3, v_POLY_multAdd17_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere2\n\tfloat v_POLY_SDFSphere2_float = sdSphere(v_POLY_globals1_position - v_POLY_floatToVec3_1_vec3, v_POLY_multAdd18_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere3\n\tfloat v_POLY_SDFSphere3_float = sdSphere(v_POLY_globals3_position - v_POLY_floatToVec3_3_vec3, v_POLY_multAdd19_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion1\n\tfloat v_POLY_SDFUnion1_union = SDFSmoothUnion(v_POLY_SDFSphere1_float, v_POLY_SDFSphere2_float, 0.3);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion2\n\tfloat v_POLY_SDFUnion2_union = SDFSmoothUnion(v_POLY_SDFUnion1_union, v_POLY_SDFSphere3_float, 0.25);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion3\n\tfloat v_POLY_SDFUnion3_union = SDFSmoothUnion(v_POLY_SDFUnion2_union, v_POLY_SDFSphere4_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion4\n\tfloat v_POLY_SDFUnion4_union = SDFSmoothUnion(v_POLY_SDFUnion3_union, v_POLY_SDFSphere5_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion5\n\tfloat v_POLY_SDFUnion5_union = SDFSmoothUnion(v_POLY_SDFUnion4_union, v_POLY_SDFSphere6_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFContext1\n\tSDFContext v_POLY_SDFContext1_SDFContext = SDFContext(v_POLY_SDFUnion5_union, _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/output1\n\tsdfContext = v_POLY_SDFContext1_SDFContext;\n\n\n\n\t\n\n\treturn sdfContext;\n}\n\nSDFContext RayMarch(vec3 ro, vec3 rd, float side) {\n\tSDFContext dO = SDFContext(0.,0);\n\n\t#pragma unroll_loop_start\n\tfor(int i=0; i<MAX_STEPS; i++) {\n\t\tvec3 p = ro + rd*dO.d;\n\t\tSDFContext sdfContext = GetDist(p);\n\t\tdO.d += sdfContext.d * side;\n\t\tdO.matId = sdfContext.matId;\n\t\tif(dO.d>MAX_DIST || abs(sdfContext.d)<SURF_DIST) break;\n\t}\n\t#pragma unroll_loop_end\n\n\treturn dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tSDFContext sdfContext = GetDist(p);\n\tvec2 e = vec2(NORMALS_BIAS, 0);\n\n\tvec3 n = sdfContext.d - vec3(\n\t\tGetDist(p-e.xyy).d,\n\t\tGetDist(p-e.yxy).d,\n\t\tGetDist(p-e.yyx).d);\n\n\treturn normalize(n);\n}\nvec3 GetLight(vec3 p, vec3 n) {\n\tvec3 dif = vec3(0.,0.,0.);\n\t#if NUM_SPOT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0 || NUM_HEMI_LIGHTS > 0 || NUM_POINT_LIGHTS > 0 || NUM_RECT_AREA_LIGHTS > 0\n\t\tGeometricContext geometry;\n\t\tgeometry.position = p;\n\t\tgeometry.normal = n;\n\t\t// geometry.viewDir = rayDir;\n\n\t\t// vec4 mvPosition = vec4( p, 1.0 );\n\t\t// mvPosition = modelViewMatrix * mvPosition;\n\t\t// vec3 vViewPosition = - mvPosition.xyz;\n\t\t// geometry.position = p;\n\t\t// geometry.normal = n;\n\t\t// geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( cameraPosition - p );\n\n\t\tIncidentLight directLight;\n\t\tReflectedLight reflectedLight;\n\t\tvec3 lightPos,lightCol,lightDir, l;\n\t\tvec3 lighDif;\n\t\tSDFContext sdfContext;\n\t\t#if NUM_SPOT_LIGHTS > 0\n\t\t\tSpotLightRayMarching spotLightRayMarching;\n\t\t\tSpotLight spotLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\t\t\tspotLightRayMarching = spotLightsRayMarching[ i ];\n\t\t\t\tspotLight = spotLights[ i ];\n\t\t\t\tspotLight.position = spotLightRayMarching.worldPos;\n\t\t\t\tspotLight.direction = spotLightRayMarching.direction;\n\t\t\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t\t\t\n\t\t\t\tlightPos = spotLightRayMarching.worldPos;\n\t\t\t\tlightCol = spotLight.color;\n\t\t\t\tl = normalize(lightPos-p);\n\t\t\t\tlighDif = directLight.color * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightPos-p)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\t\t#if NUM_DIR_LIGHTS > 0\n\t\t\tDirectionalLightRayMarching directionalLightRayMarching;\n\t\t\tDirectionalLight directionalLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\t\t\tdirectionalLightRayMarching = directionalLightsRayMarching[ i ];\n\t\t\t\tdirectionalLight = directionalLights[ i ];\n\t\t\t\tlightDir = directionalLightRayMarching.direction;\n\t\t\t\tlightCol = directionalLight.color;\n\t\t\t\tl = lightDir;\n\t\t\t\tlighDif = lightCol * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightDir)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\t\t\n\n\t\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t\t#pragma unroll_loop_start\n\t\t\tHemisphereLight hemiLight;\n\t\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\t\themiLight.skyColor = hemisphereLights[ i ].skyColor;\n\t\t\t\themiLight.groundColor = hemisphereLights[ i ].groundColor;\n\t\t\t\themiLight.direction = hemisphereLightsRayMarching[ i ].direction;\n\t\t\t\tdif += getHemisphereLightIrradiance( hemiLight, n );\n\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\n\t\t#endif\n\n\t\t#if NUM_POINT_LIGHTS > 0\n\t\t\tPointLightRayMarching pointLightRayMarching;\n\t\t\tPointLight pointLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\t\t\tpointLightRayMarching = pointLightsRayMarching[ i ];\n\t\t\t\tpointLight = pointLights[ i ];\n\t\t\t\tpointLight.position = pointLightRayMarching.worldPos;\n\t\t\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t\t\t\n\t\t\t\tlightPos = pointLightRayMarching.worldPos;\n\t\t\t\tlightCol = pointLight.color;\n\t\t\t\tl = normalize(lightPos-p);\n\t\t\t\tlighDif = directLight.color * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightPos-p)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\n\t\t// #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\t\t// \tRectAreaLight rectAreaLight;\n\t\t// \tAreaLightRayMarching areaLightRayMarching;\n\t\t// \tPhysicalMaterial material;\n\t\t// \tmaterial.roughness = 1.;\n\t\t// \tmaterial.specularColor = vec3(1.);\n\t\t// \tmaterial.diffuseColor = vec3(1.);\n\n\t\t// \t#pragma unroll_loop_start\n\t\t// \tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\t// \t\tareaLightRayMarching = areaLightsRayMarching[ i ];\n\t\t// \t\trectAreaLight = rectAreaLights[ i ];\n\t\t// \t\trectAreaLight.position = areaLightRayMarching.worldPos;\n\n\t\t\t\t\n\t\t// \t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t\t// \t}\n\t\t// \t#pragma unroll_loop_end\n\t\t// \tdif += reflectedLight.directDiffuse;\n\n\t\t// #endif\n\t#endif\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\t// irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\tdif += irradiance;\n\treturn dif;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n\tfloat res = 1.0;\n\tfloat ph = 1e20;\n\tfor( float t=mint; t<maxt; )\n\t{\n\t\tfloat h = GetDist(ro + rd*t).d;\n\t\tif( h<0.001 )\n\t\t\treturn 0.0;\n\t\tfloat y = h*h/(2.0*ph);\n\t\tfloat d = sqrt(h*h-y*y);\n\t\tres = min( res, k*d/max(0.0,t-y) );\n\t\tph = h;\n\t\tt += h;\n\t}\n\treturn res;\n}\n\n\n\nvec3 applyMaterialWithoutRefraction(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(1.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n\nvec3 applyMaterialWithoutReflection(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(1.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n#ifdef RAYMARCHED_REFLECTIONS\nvec3 GetReflection(vec3 p, vec3 n, vec3 rayDir, float biasMult, sampler2D envMap, int reflectionDepth){\n\tbool hitReflection = true;\n\tvec3 reflectedColor = vec3(0.);\n\t#pragma unroll_loop_start\n\tfor(int i=0; i < reflectionDepth; i++) {\n\t\tif(hitReflection){\n\t\t\trayDir = reflect(rayDir, n);\n\t\t\tp += n*SURF_DIST*biasMult;\n\t\t\tSDFContext sdfContext = RayMarch(p, rayDir, 1.);\n\t\t\tif( sdfContext.d >= MAX_DIST){\n\t\t\t\thitReflection = false;\n\t\t\t\treflectedColor = envMapSample(rayDir, envMap);\n\t\t\t}\n\t\t\tif(hitReflection){\n\t\t\t\tp += rayDir * sdfContext.d;\n\t\t\t\tn = GetNormal(p);\n\t\t\t\tvec3 matCol = applyMaterialWithoutReflection(p, n, rayDir, sdfContext.matId);\n\t\t\t\treflectedColor += matCol;\n\t\t\t}\n\t\t}\n\t}\n\t#pragma unroll_loop_end\n\treturn reflectedColor;\n}\n#endif\n\n#ifdef RAYMARCHED_REFRACTIONS\n// xyz for color, w for distanceInsideMedium\nvec4 GetRefractedData(vec3 p, vec3 n, vec3 rayDir, float ior, float biasMult, sampler2D envMap, float refractionMaxDist, int refractionDepth){\n\tbool hitRefraction = true;\n\tbool changeSide = true;\n\t#ifdef RAYMARCHED_REFRACTIONS_START_OUTSIDE_MEDIUM\n\tfloat side = -1.;\n\t#else\n\tfloat side =  1.;\n\t#endif\n\tfloat iorInverted = 1. / ior;\n\tvec3 refractedColor = vec3(0.);\n\tfloat distanceInsideMedium=0.;\n\tfloat totalRefractedDistance=0.;\n\n\t#pragma unroll_loop_start\n\tfor(int i=0; i < refractionDepth; i++) {\n\t\tif(hitRefraction){\n\t\t\tfloat currentIor = side<0. ? iorInverted : ior;\n\t\t\tvec3 rayDirPreRefract = rayDir;\n\t\t\trayDir = refract(rayDir, n, currentIor);\n\t\t\tchangeSide = dot(rayDir, rayDir)!=0.;\n\t\t\tif(changeSide == true) {\n\t\t\t\tp -= n*SURF_DIST*(2.+biasMult);\n\t\t\t} else {\n\t\t\t\tp += n*SURF_DIST*(   biasMult);\n\t\t\t\trayDir = reflect(rayDirPreRefract, n);\n\t\t\t}\n\t\t\tSDFContext sdfContext = RayMarch(p, rayDir, side);\n\t\t\ttotalRefractedDistance += sdfContext.d;\n\t\t\tif( abs(sdfContext.d) >= MAX_DIST || totalRefractedDistance > refractionMaxDist ){\n\t\t\t\thitRefraction = false;\n\t\t\t\trefractedColor = envMapSample(rayDir, envMap);\n\t\t\t}\n\t\t\tif(hitRefraction){\n\t\t\t\tp += rayDir * sdfContext.d;\n\t\t\t\tn = GetNormal(p) * side;\n\t\t\t\tvec3 matCol = applyMaterialWithoutRefraction(p, n, rayDir, sdfContext.matId);\n\t\t\t\trefractedColor = matCol;\n\n\t\t\t\t// same as: side < 0. ? abs(sdfContext.d) : 0.;\n\t\t\t\tdistanceInsideMedium += (side-1.)*-0.5*abs(sdfContext.d);\n\t\t\t\tif( changeSide ){\n\t\t\t\t\tside *= -1.;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t#ifdef RAYMARCHED_REFRACTIONS_SAMPLE_ENV_MAP_ON_LAST\n\t\tif(i == refractionDepth-1){\n\t\t\trefractedColor = envMapSample(rayDir, envMap);\n\t\t}\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\treturn vec4(refractedColor, distanceInsideMedium);\n}\nfloat applyRefractionAbsorption(float refractedDataColor, float tint, float distanceInsideMedium, float absorption){\n\tfloat blend = smoothstep(0.,1.,absorption*distanceInsideMedium);\n\treturn mix(refractedDataColor, refractedDataColor*tint, blend);\n}\nvec3 applyRefractionAbsorption(vec3 refractedDataColor, vec3 tint, float distanceInsideMedium, float absorption){\n\tfloat blend = smoothstep(0.,1.,absorption*distanceInsideMedium);\n\treturn vec3(\n\t\tmix(refractedDataColor.r, refractedDataColor.r*tint.r, blend),\n\t\tmix(refractedDataColor.g, refractedDataColor.g*tint.g, blend),\n\t\tmix(refractedDataColor.b, refractedDataColor.b*tint.b, blend)\n\t);\n}\n\n#endif\n\nvec3 applyMaterial(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(0.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n\n\n\n\nvec4 applyShading(vec3 rayOrigin, vec3 rayDir, SDFContext sdfContext){\n\tvec3 p = rayOrigin + rayDir * sdfContext.d;\n\tvec3 n = GetNormal(p);\n\t\n\n\tvec3 col = applyMaterial(p, n, rayDir, sdfContext.matId);\n\t\t\n\t// gamma\n\tcol = pow( col, vec3(0.4545) ); \n\treturn vec4(col, 1.);\n}\n\nvoid main()\t{\n\n\tvec3 rayDir = normalize(vPw - cameraPosition);\n\tvec3 rayOrigin = cameraPosition - CENTER;\n\n\tSDFContext sdfContext = RayMarch(rayOrigin, rayDir, 1.);\n\n\tgl_FragColor = vec4(0.);\n\tif( sdfContext.d >= MAX_DIST ){ discard; }\n\tgl_FragColor = applyShading(rayOrigin, rayDir, sdfContext);\n}","lights":true},"onBeforeCompileDataJSONWithoutShaders":{"paramConfigs":[{"type":"node_path","name":"envTexture1","defaultValue":"","uniformName":"v_POLY_texture_envTexture1"},{"type":"vector3","name":"pos1","defaultValue":[0,0,0],"uniformName":"v_POLY_param_pos1"},{"type":"vector3","name":"pos2","defaultValue":[0,0,0],"uniformName":"v_POLY_param_pos2"},{"type":"vector3","name":"pos3","defaultValue":[0,0,0],"uniformName":"v_POLY_param_pos3"},{"type":"float","name":"radiusMult","defaultValue":0,"uniformName":"v_POLY_param_radiusMult"}],"timeDependent":true,"resolutionDependent":false},"customMaterials":{}}}}},"COP":{"type":"copNetwork","nodes":{"imageEXR_envMap":{"type":"imageEXR","params":{"url":"textures/christmas_photo_studio_01_1k.exr?timestamp=1660502953438"}}}},"actor1":{"type":"actor","nodes":{"onTick1":{"type":"onTick"},"rayFromCursor1":{"type":"rayFromCursor","params":{"element":1},"connection_points":{"in":[],"out":[{"name":"ray","type":"Ray","isArray":false}]}},"rayIntersectPlane1":{"type":"rayIntersectPlane","inputs":[{"index":0,"node":"rayFromCursor1","output":"ray"},{"index":1,"node":"plane1","output":"plane"}],"connection_points":{"in":[{"name":"Ray","type":"Ray","isArray":false},{"name":"Plane","type":"Plane","isArray":false}],"out":[{"name":"position","type":"Vector3","isArray":false}]}},"plane1":{"type":"plane","params":{"normal":[0,0,1]}},"setMaterialUniform1":{"type":"setMaterialUniform","params":{"type":3,"Vector3":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"uniformName":{"type":"string","default_value":"","options":{"spare":true,"editable":true},"raw_input":"pos1"},"lerp":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.21}},"maxInputsCount":5,"inputs":[{"index":0,"node":"onTick1","output":"trigger"},null,{"index":2,"node":"rayIntersectPlane1","output":"position"}],"connection_points":{"in":[{"name":"trigger","type":"trigger","isArray":false},{"name":"Material","type":"Material","isArray":false},{"name":"Vector3","type":"Vector3","isArray":false},{"name":"uniformName","type":"string","isArray":false},{"name":"lerp","type":"float","isArray":false}],"out":[{"name":"trigger","type":"trigger","isArray":false}]}},"setMaterialUniform2":{"type":"setMaterialUniform","params":{"type":3,"Vector3":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"uniformName":{"type":"string","default_value":"","options":{"spare":true,"editable":true},"raw_input":"pos2"},"lerp":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.06}},"maxInputsCount":5,"inputs":[{"index":0,"node":"onTick1","output":"trigger"},null,{"index":2,"node":"rayIntersectPlane1","output":"position"}],"connection_points":{"in":[{"name":"trigger","type":"trigger","isArray":false},{"name":"Material","type":"Material","isArray":false},{"name":"Vector3","type":"Vector3","isArray":false},{"name":"uniformName","type":"string","isArray":false},{"name":"lerp","type":"float","isArray":false}],"out":[{"name":"trigger","type":"trigger","isArray":false}]}},"setMaterialUniform3":{"type":"setMaterialUniform","params":{"type":3,"Vector3":{"type":"vector3","default_value":[0,0,0],"options":{"spare":true,"editable":false}},"uniformName":{"type":"string","default_value":"","options":{"spare":true,"editable":true},"raw_input":"pos3"},"lerp":{"type":"float","default_value":0,"options":{"spare":true,"editable":true},"raw_input":0.01}},"maxInputsCount":5,"inputs":[{"index":0,"node":"onTick1","output":"trigger"},null,{"index":2,"node":"rayIntersectPlane1","output":"position"}],"connection_points":{"in":[{"name":"trigger","type":"trigger","isArray":false},{"name":"Material","type":"Material","isArray":false},{"name":"Vector3","type":"Vector3","isArray":false},{"name":"uniformName","type":"string","isArray":false},{"name":"lerp","type":"float","isArray":false}],"out":[{"name":"trigger","type":"trigger","isArray":false}]}}},"inputs":["material3"],"flags":{"display":true}},"ANIM":{"type":"animationsNetwork","nodes":{"duration1":{"type":"duration","params":{"duration":3}},"easing1":{"type":"easing","params":{"name":2,"inOut":2},"inputs":["duration1"]},"target1":{"type":"target","params":{"type":1,"nodePath":"../../MAT/rayMarchingBuilder1"},"inputs":["easing1"]},"propertyName1":{"type":"propertyName","params":{"name":"radiusMult"},"inputs":["target1"]},"propertyValue1":{"type":"propertyValue","params":{"size":1,"value1":1,"value3":[0,1,0]},"inputs":["propertyName1"]},"propertyValue2":{"type":"propertyValue","params":{"size":1,"value1":-0.4},"inputs":["propertyName1"]},"PLAY":{"type":"null","inputs":["propertyValue1"]},"RESET":{"type":"null","inputs":["propertyValue2"]},"CONTROLS":{"type":"play","inputs":["RESET","PLAY"]}}},"eventsNetwork1":{"type":"eventsNetwork","nodes":{"scene1":{"type":"scene"},"animation1":{"type":"animation","params":{"animation":"../../ANIM/PLAY"},"inputs":[{"index":0,"node":"scene1","output":"play"}]}}}},"flags":{"display":true}}},"params":{"bgColor":[0,0,0],"mainCameraPath":"/cameras/cameras:sopGroup/perspectiveCamera_MAIN"}},"shaders":{"/ink/MAT/rayMarchingBuilder1":{"vertex":"precision highp float;\nprecision highp int;\n\nvarying vec3 vPw;\n\n#include <common>\n\n\n\n// /ink/MAT/rayMarchingBuilder1/globals2\nuniform float time;\n\n\n\n\n\nvoid main()\t{\n\n\tvPw = (modelMatrix * vec4( position, 1.0 )).xyz;\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}","fragment":"precision highp float;\nprecision highp int;\n\n// --- applyMaterial constants definition\nuniform int MAX_STEPS;\nuniform float MAX_DIST;\nuniform float SURF_DIST;\nuniform float NORMALS_BIAS;\nuniform vec3 CENTER;\n#define ZERO 0\n\n#include <common>\n\n\n\n// /ink/MAT/rayMarchingBuilder1/SDFSphere4\n// https://iquilezles.org/articles/distfunctions/\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n/*\n*\n* SDF PRIMITIVES\n*\n*/\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 q = abs(p) - b*0.5;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n\tvec3 q = abs(p) - b*0.5;\n\treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n\t\tp = abs(p  )-b*0.5;\n\tvec3 q = abs(p+e)-e;\n\treturn min(min(\n\t\tlength(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n\t\tlength(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n\t\tlength(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n\tp.y -= clamp( p.y, 0.0, h );\n\treturn length( p ) - r;\n}\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n\t// c is the sin/cos of the angle, h is height\n\t// Alternatively pass q instead of (c,h),\n\t// which is the point at the base in 2D\n\tvec2 q = h*vec2(c.x/c.y,-1.0);\n\n\tvec2 w = vec2( length(p.xz), p.y );\n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n\tvec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n\tfloat k = sign( q.y );\n\tfloat d = min(dot( a, a ),dot(b, b));\n\tfloat s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\nfloat sdConeWrapped(vec3 pos, float angle, float height){\n\treturn sdCone(pos, vec2(sin(angle), cos(angle)), height);\n}\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n\tfloat b = (r1-r2)/h;\n\tfloat a = sqrt(1.0-b*b);\n\n\tvec2 q = vec2( length(p.xz), p.y );\n\tfloat k = dot(q,vec2(-b,a));\n\tif( k<0.0 ) return length(q) - r1;\n\tif( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n\treturn dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n\t// n must be normalized\n\treturn dot(p,n) + h;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n\tp.x = abs(p.x);\n\tfloat k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n\treturn sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float radius)\n{\n\tvec2 p = vec2( length(pos.xz), pos.y );\n\tfloat l = length(p) - radius;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,radius) );\n\treturn max(l,m*sign(c.y*p.x-c.x*p.y));\n}\nfloat sdSolidAngleWrapped(vec3 pos, float angle, float radius){\n\treturn sdSolidAngle(pos, vec2(sin(angle), cos(angle)), radius);\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\n/*\n*\n* SDF OPERATIONS\n*\n*/\nfloat SDFUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat SDFSubtract( float d1, float d2 ) { return max(-d1,d2); }\nfloat SDFIntersect( float d1, float d2 ) { return max(d1,d2); }\n\nfloat SDFSmoothUnion( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\treturn mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat SDFSmoothSubtract( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\treturn mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat SDFSmoothIntersect( float d1, float d2, float k ) {\n\tfloat h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\treturn mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nvec4 SDFElongateFast( in vec3 p, in vec3 h )\n{\n\treturn vec4( p-clamp(p,-h,h), 0.0 );\n}\nvec4 SDFElongateSlow( in vec3 p, in vec3 h )\n{\n\tvec3 q = abs(p)-h;\n\treturn vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\nfloat SDFOnion( in float sdf, in float thickness )\n{\n\treturn abs(sdf)-thickness;\n}\n\n// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\nconst int _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1 = 316;\n\nstruct EnvMap {\n\tvec3 tint;\n\tfloat intensity;\n\tfloat fresnel;\n\tfloat fresnelPower;\n};\nvec3 envMapSample(vec3 rayDir, sampler2D map){\n\t// http://www.pocketgl.com/reflections/\n\tvec2 uv = vec2( atan( -rayDir.z, -rayDir.x ) * RECIPROCAL_PI2 + 0.5, rayDir.y * 0.5 + 0.5 );\n\tvec3 env = texture2D(map, uv).rgb;\n\treturn env;\n}\nvec3 envMapSampleWithFresnel(vec3 rayDir, sampler2D map, EnvMap envMap, vec3 n, vec3 cameraPosition){\n\t// http://www.pocketgl.com/reflections/\n\tvec3 env = envMapSample(rayDir, map).rgb;\n\tfloat fresnel = pow(1.-dot(normalize(cameraPosition), n), envMap.fresnelPower);\n\tfloat fresnelFactor = (1.-envMap.fresnel) + envMap.fresnel*fresnel;\n\treturn env * envMap.tint * envMap.intensity * fresnelFactor;\n}\n\n\n\n\n\n\n\n// /ink/MAT/rayMarchingBuilder1/globals2\nuniform float time;\n\n// /ink/MAT/rayMarchingBuilder1/param4\nuniform float v_POLY_param_radiusMult;\n\n// /ink/MAT/rayMarchingBuilder1/param1\nuniform vec3 v_POLY_param_pos1;\n\n// /ink/MAT/rayMarchingBuilder1/param2\nuniform vec3 v_POLY_param_pos2;\n\n// /ink/MAT/rayMarchingBuilder1/param3\nuniform vec3 v_POLY_param_pos3;\n\n// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\nuniform sampler2D v_POLY_texture_envTexture1;\n\n\n\n\n#include <lightmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n\n\n\n// uniform vec3 u_BoundingBoxMin;\n// uniform vec3 u_BoundingBoxMax;\n\n\nvarying vec3 vPw;\n\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLightRayMarching {\n\t\tvec3 worldPos;\n\t\tvec3 direction;\n\t};\n\tuniform SpotLightRayMarching spotLightsRayMarching[ NUM_SPOT_LIGHTS ];\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLightRayMarching {\n\t\tvec3 direction;\n\t};\n\tuniform DirectionalLightRayMarching directionalLightsRayMarching[ NUM_DIR_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLightRayMarching {\n\t\tvec3 direction;\n\t};\n\tuniform HemisphereLightRayMarching hemisphereLightsRayMarching[ NUM_HEMI_LIGHTS ];\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLightRayMarching {\n\t\tvec3 worldPos;\n\t};\n\tuniform PointLightRayMarching pointLightsRayMarching[ NUM_POINT_LIGHTS ];\n#endif\n\n\nstruct SDFContext {\n\tfloat d;\n\tint matId;\n};\n\nSDFContext DefaultSDFContext(){\n\treturn SDFContext( 0.0, 0 );\n}\nint DefaultSDFMaterial(){\n\treturn 0;\n}\n\n\n\nSDFContext GetDist(vec3 p) {\n\tSDFContext sdfContext = SDFContext(0.0, 0);\n\n\t// start GetDist builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/globals2\n\tvec3 v_POLY_globals2_position = p;\n\tfloat v_POLY_globals2_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param4\n\tfloat v_POLY_param4_val = v_POLY_param_radiusMult;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals1\n\tvec3 v_POLY_globals1_position = p;\n\tfloat v_POLY_globals1_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals3\n\tvec3 v_POLY_globals3_position = p;\n\tfloat v_POLY_globals3_time = time;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals4\n\tvec3 v_POLY_globals4_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param1\n\tvec3 v_POLY_param1_val = v_POLY_param_pos1;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals5\n\tvec3 v_POLY_globals5_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param2\n\tvec3 v_POLY_param2_val = v_POLY_param_pos2;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/globals6\n\tvec3 v_POLY_globals6_position = p;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/param3\n\tvec3 v_POLY_param3_val = v_POLY_param_pos3;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd5\n\tfloat v_POLY_multAdd5_val = (0.37*(v_POLY_globals2_time + -3.5)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd3\n\tfloat v_POLY_multAdd3_val = (0.6*(v_POLY_globals2_time + 1.6)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd7\n\tfloat v_POLY_multAdd7_val = (0.16*(v_POLY_globals2_time + 0.5)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd17\n\tfloat v_POLY_multAdd17_val = (0.46*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd18\n\tfloat v_POLY_multAdd18_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd19\n\tfloat v_POLY_multAdd19_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd20\n\tfloat v_POLY_multAdd20_val = (0.36*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd21\n\tfloat v_POLY_multAdd21_val = (0.2*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd22\n\tfloat v_POLY_multAdd22_val = (0.2*(v_POLY_param4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd9\n\tfloat v_POLY_multAdd9_val = (0.88*(v_POLY_globals1_time + 4.6)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd1\n\tfloat v_POLY_multAdd1_val = (1.0*(v_POLY_globals1_time + -1.7)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd13\n\tfloat v_POLY_multAdd13_val = (0.64*(v_POLY_globals3_time + 0.31)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd11\n\tfloat v_POLY_multAdd11_val = (0.2*(v_POLY_globals3_time + -13.700000000000001)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd15\n\tfloat v_POLY_multAdd15_val = (1.3*(v_POLY_globals3_time + -1.7)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin3\n\tfloat v_POLY_sin3_val = sin(v_POLY_multAdd5_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin2\n\tfloat v_POLY_sin2_val = sin(v_POLY_multAdd3_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin4\n\tfloat v_POLY_sin4_val = sin(v_POLY_multAdd7_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere4\n\tfloat v_POLY_SDFSphere4_float = sdSphere(v_POLY_globals4_position - v_POLY_param1_val, v_POLY_multAdd20_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere5\n\tfloat v_POLY_SDFSphere5_float = sdSphere(v_POLY_globals5_position - v_POLY_param2_val, v_POLY_multAdd21_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere6\n\tfloat v_POLY_SDFSphere6_float = sdSphere(v_POLY_globals6_position - v_POLY_param3_val, v_POLY_multAdd22_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin5\n\tfloat v_POLY_sin5_val = sin(v_POLY_multAdd9_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin1\n\tfloat v_POLY_sin1_val = sin(v_POLY_multAdd1_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin7\n\tfloat v_POLY_sin7_val = sin(v_POLY_multAdd13_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin6\n\tfloat v_POLY_sin6_val = sin(v_POLY_multAdd11_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/sin8\n\tfloat v_POLY_sin8_val = sin(v_POLY_multAdd15_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd6\n\tfloat v_POLY_multAdd6_val = (0.35*(v_POLY_sin3_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd4\n\tfloat v_POLY_multAdd4_val = (1.0*(v_POLY_sin2_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd8\n\tfloat v_POLY_multAdd8_val = (1.2*(v_POLY_sin4_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd10\n\tfloat v_POLY_multAdd10_val = (0.31*(v_POLY_sin5_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd2\n\tfloat v_POLY_multAdd2_val = (1.0*(v_POLY_sin1_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd14\n\tfloat v_POLY_multAdd14_val = (0.31*(v_POLY_sin7_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd12\n\tfloat v_POLY_multAdd12_val = (1.0*(v_POLY_sin6_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/multAdd16\n\tfloat v_POLY_multAdd16_val = (0.53*(v_POLY_sin8_val + 0.0)) + 0.0;\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_2\n\tvec3 v_POLY_floatToVec3_2_vec3 = vec3(v_POLY_multAdd6_val, v_POLY_multAdd4_val, v_POLY_multAdd8_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_1\n\tvec3 v_POLY_floatToVec3_1_vec3 = vec3(v_POLY_multAdd10_val, v_POLY_multAdd2_val, 0.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/floatToVec3_3\n\tvec3 v_POLY_floatToVec3_3_vec3 = vec3(v_POLY_multAdd14_val, v_POLY_multAdd12_val, v_POLY_multAdd16_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere1\n\tfloat v_POLY_SDFSphere1_float = sdSphere(v_POLY_globals2_position - v_POLY_floatToVec3_2_vec3, v_POLY_multAdd17_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere2\n\tfloat v_POLY_SDFSphere2_float = sdSphere(v_POLY_globals1_position - v_POLY_floatToVec3_1_vec3, v_POLY_multAdd18_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFSphere3\n\tfloat v_POLY_SDFSphere3_float = sdSphere(v_POLY_globals3_position - v_POLY_floatToVec3_3_vec3, v_POLY_multAdd19_val);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion1\n\tfloat v_POLY_SDFUnion1_union = SDFSmoothUnion(v_POLY_SDFSphere1_float, v_POLY_SDFSphere2_float, 0.3);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion2\n\tfloat v_POLY_SDFUnion2_union = SDFSmoothUnion(v_POLY_SDFUnion1_union, v_POLY_SDFSphere3_float, 0.25);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion3\n\tfloat v_POLY_SDFUnion3_union = SDFSmoothUnion(v_POLY_SDFUnion2_union, v_POLY_SDFSphere4_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion4\n\tfloat v_POLY_SDFUnion4_union = SDFSmoothUnion(v_POLY_SDFUnion3_union, v_POLY_SDFSphere5_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFUnion5\n\tfloat v_POLY_SDFUnion5_union = SDFSmoothUnion(v_POLY_SDFUnion4_union, v_POLY_SDFSphere6_float, 0.28);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFContext1\n\tSDFContext v_POLY_SDFContext1_SDFContext = SDFContext(v_POLY_SDFUnion5_union, _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/output1\n\tsdfContext = v_POLY_SDFContext1_SDFContext;\n\n\n\n\t\n\n\treturn sdfContext;\n}\n\nSDFContext RayMarch(vec3 ro, vec3 rd, float side) {\n\tSDFContext dO = SDFContext(0.,0);\n\n\t#pragma unroll_loop_start\n\tfor(int i=0; i<MAX_STEPS; i++) {\n\t\tvec3 p = ro + rd*dO.d;\n\t\tSDFContext sdfContext = GetDist(p);\n\t\tdO.d += sdfContext.d * side;\n\t\tdO.matId = sdfContext.matId;\n\t\tif(dO.d>MAX_DIST || abs(sdfContext.d)<SURF_DIST) break;\n\t}\n\t#pragma unroll_loop_end\n\n\treturn dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tSDFContext sdfContext = GetDist(p);\n\tvec2 e = vec2(NORMALS_BIAS, 0);\n\n\tvec3 n = sdfContext.d - vec3(\n\t\tGetDist(p-e.xyy).d,\n\t\tGetDist(p-e.yxy).d,\n\t\tGetDist(p-e.yyx).d);\n\n\treturn normalize(n);\n}\nvec3 GetLight(vec3 p, vec3 n) {\n\tvec3 dif = vec3(0.,0.,0.);\n\t#if NUM_SPOT_LIGHTS > 0 || NUM_DIR_LIGHTS > 0 || NUM_HEMI_LIGHTS > 0 || NUM_POINT_LIGHTS > 0 || NUM_RECT_AREA_LIGHTS > 0\n\t\tGeometricContext geometry;\n\t\tgeometry.position = p;\n\t\tgeometry.normal = n;\n\t\t// geometry.viewDir = rayDir;\n\n\t\t// vec4 mvPosition = vec4( p, 1.0 );\n\t\t// mvPosition = modelViewMatrix * mvPosition;\n\t\t// vec3 vViewPosition = - mvPosition.xyz;\n\t\t// geometry.position = p;\n\t\t// geometry.normal = n;\n\t\t// geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( cameraPosition - p );\n\n\t\tIncidentLight directLight;\n\t\tReflectedLight reflectedLight;\n\t\tvec3 lightPos,lightCol,lightDir, l;\n\t\tvec3 lighDif;\n\t\tSDFContext sdfContext;\n\t\t#if NUM_SPOT_LIGHTS > 0\n\t\t\tSpotLightRayMarching spotLightRayMarching;\n\t\t\tSpotLight spotLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\t\t\tspotLightRayMarching = spotLightsRayMarching[ i ];\n\t\t\t\tspotLight = spotLights[ i ];\n\t\t\t\tspotLight.position = spotLightRayMarching.worldPos;\n\t\t\t\tspotLight.direction = spotLightRayMarching.direction;\n\t\t\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t\t\t\n\t\t\t\tlightPos = spotLightRayMarching.worldPos;\n\t\t\t\tlightCol = spotLight.color;\n\t\t\t\tl = normalize(lightPos-p);\n\t\t\t\tlighDif = directLight.color * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightPos-p)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\t\t#if NUM_DIR_LIGHTS > 0\n\t\t\tDirectionalLightRayMarching directionalLightRayMarching;\n\t\t\tDirectionalLight directionalLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\t\t\tdirectionalLightRayMarching = directionalLightsRayMarching[ i ];\n\t\t\t\tdirectionalLight = directionalLights[ i ];\n\t\t\t\tlightDir = directionalLightRayMarching.direction;\n\t\t\t\tlightCol = directionalLight.color;\n\t\t\t\tl = lightDir;\n\t\t\t\tlighDif = lightCol * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightDir)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\t\t\n\n\t\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t\t#pragma unroll_loop_start\n\t\t\tHemisphereLight hemiLight;\n\t\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\t\themiLight.skyColor = hemisphereLights[ i ].skyColor;\n\t\t\t\themiLight.groundColor = hemisphereLights[ i ].groundColor;\n\t\t\t\themiLight.direction = hemisphereLightsRayMarching[ i ].direction;\n\t\t\t\tdif += getHemisphereLightIrradiance( hemiLight, n );\n\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\n\t\t#endif\n\n\t\t#if NUM_POINT_LIGHTS > 0\n\t\t\tPointLightRayMarching pointLightRayMarching;\n\t\t\tPointLight pointLight;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\t\t\tpointLightRayMarching = pointLightsRayMarching[ i ];\n\t\t\t\tpointLight = pointLights[ i ];\n\t\t\t\tpointLight.position = pointLightRayMarching.worldPos;\n\t\t\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t\t\t\n\t\t\t\tlightPos = pointLightRayMarching.worldPos;\n\t\t\t\tlightCol = pointLight.color;\n\t\t\t\tl = normalize(lightPos-p);\n\t\t\t\tlighDif = directLight.color * clamp(dot(n, l), 0., 1.);\n\t\t\t\tsdfContext = RayMarch(p+n*SURF_DIST*2., l, 1.);\n\t\t\t\tif(sdfContext.d<length(lightPos-p)) lighDif *= .0;\n\n\t\t\t\tdif += lighDif;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t#endif\n\n\t\t// #if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\t\t// \tRectAreaLight rectAreaLight;\n\t\t// \tAreaLightRayMarching areaLightRayMarching;\n\t\t// \tPhysicalMaterial material;\n\t\t// \tmaterial.roughness = 1.;\n\t\t// \tmaterial.specularColor = vec3(1.);\n\t\t// \tmaterial.diffuseColor = vec3(1.);\n\n\t\t// \t#pragma unroll_loop_start\n\t\t// \tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\t// \t\tareaLightRayMarching = areaLightsRayMarching[ i ];\n\t\t// \t\trectAreaLight = rectAreaLights[ i ];\n\t\t// \t\trectAreaLight.position = areaLightRayMarching.worldPos;\n\n\t\t\t\t\n\t\t// \t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t\t// \t}\n\t\t// \t#pragma unroll_loop_end\n\t\t// \tdif += reflectedLight.directDiffuse;\n\n\t\t// #endif\n\t#endif\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\t// irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\tdif += irradiance;\n\treturn dif;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n\tfloat res = 1.0;\n\tfloat ph = 1e20;\n\tfor( float t=mint; t<maxt; )\n\t{\n\t\tfloat h = GetDist(ro + rd*t).d;\n\t\tif( h<0.001 )\n\t\t\treturn 0.0;\n\t\tfloat y = h*h/(2.0*ph);\n\t\tfloat d = sqrt(h*h-y*y);\n\t\tres = min( res, k*d/max(0.0,t-y) );\n\t\tph = h;\n\t\tt += h;\n\t}\n\treturn res;\n}\n\n\n\nvec3 applyMaterialWithoutRefraction(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(1.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n\nvec3 applyMaterialWithoutReflection(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(1.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n#ifdef RAYMARCHED_REFLECTIONS\nvec3 GetReflection(vec3 p, vec3 n, vec3 rayDir, float biasMult, sampler2D envMap, int reflectionDepth){\n\tbool hitReflection = true;\n\tvec3 reflectedColor = vec3(0.);\n\t#pragma unroll_loop_start\n\tfor(int i=0; i < reflectionDepth; i++) {\n\t\tif(hitReflection){\n\t\t\trayDir = reflect(rayDir, n);\n\t\t\tp += n*SURF_DIST*biasMult;\n\t\t\tSDFContext sdfContext = RayMarch(p, rayDir, 1.);\n\t\t\tif( sdfContext.d >= MAX_DIST){\n\t\t\t\thitReflection = false;\n\t\t\t\treflectedColor = envMapSample(rayDir, envMap);\n\t\t\t}\n\t\t\tif(hitReflection){\n\t\t\t\tp += rayDir * sdfContext.d;\n\t\t\t\tn = GetNormal(p);\n\t\t\t\tvec3 matCol = applyMaterialWithoutReflection(p, n, rayDir, sdfContext.matId);\n\t\t\t\treflectedColor += matCol;\n\t\t\t}\n\t\t}\n\t}\n\t#pragma unroll_loop_end\n\treturn reflectedColor;\n}\n#endif\n\n#ifdef RAYMARCHED_REFRACTIONS\n// xyz for color, w for distanceInsideMedium\nvec4 GetRefractedData(vec3 p, vec3 n, vec3 rayDir, float ior, float biasMult, sampler2D envMap, float refractionMaxDist, int refractionDepth){\n\tbool hitRefraction = true;\n\tbool changeSide = true;\n\t#ifdef RAYMARCHED_REFRACTIONS_START_OUTSIDE_MEDIUM\n\tfloat side = -1.;\n\t#else\n\tfloat side =  1.;\n\t#endif\n\tfloat iorInverted = 1. / ior;\n\tvec3 refractedColor = vec3(0.);\n\tfloat distanceInsideMedium=0.;\n\tfloat totalRefractedDistance=0.;\n\n\t#pragma unroll_loop_start\n\tfor(int i=0; i < refractionDepth; i++) {\n\t\tif(hitRefraction){\n\t\t\tfloat currentIor = side<0. ? iorInverted : ior;\n\t\t\tvec3 rayDirPreRefract = rayDir;\n\t\t\trayDir = refract(rayDir, n, currentIor);\n\t\t\tchangeSide = dot(rayDir, rayDir)!=0.;\n\t\t\tif(changeSide == true) {\n\t\t\t\tp -= n*SURF_DIST*(2.+biasMult);\n\t\t\t} else {\n\t\t\t\tp += n*SURF_DIST*(   biasMult);\n\t\t\t\trayDir = reflect(rayDirPreRefract, n);\n\t\t\t}\n\t\t\tSDFContext sdfContext = RayMarch(p, rayDir, side);\n\t\t\ttotalRefractedDistance += sdfContext.d;\n\t\t\tif( abs(sdfContext.d) >= MAX_DIST || totalRefractedDistance > refractionMaxDist ){\n\t\t\t\thitRefraction = false;\n\t\t\t\trefractedColor = envMapSample(rayDir, envMap);\n\t\t\t}\n\t\t\tif(hitRefraction){\n\t\t\t\tp += rayDir * sdfContext.d;\n\t\t\t\tn = GetNormal(p) * side;\n\t\t\t\tvec3 matCol = applyMaterialWithoutRefraction(p, n, rayDir, sdfContext.matId);\n\t\t\t\trefractedColor = matCol;\n\n\t\t\t\t// same as: side < 0. ? abs(sdfContext.d) : 0.;\n\t\t\t\tdistanceInsideMedium += (side-1.)*-0.5*abs(sdfContext.d);\n\t\t\t\tif( changeSide ){\n\t\t\t\t\tside *= -1.;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t#ifdef RAYMARCHED_REFRACTIONS_SAMPLE_ENV_MAP_ON_LAST\n\t\tif(i == refractionDepth-1){\n\t\t\trefractedColor = envMapSample(rayDir, envMap);\n\t\t}\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\treturn vec4(refractedColor, distanceInsideMedium);\n}\nfloat applyRefractionAbsorption(float refractedDataColor, float tint, float distanceInsideMedium, float absorption){\n\tfloat blend = smoothstep(0.,1.,absorption*distanceInsideMedium);\n\treturn mix(refractedDataColor, refractedDataColor*tint, blend);\n}\nvec3 applyRefractionAbsorption(vec3 refractedDataColor, vec3 tint, float distanceInsideMedium, float absorption){\n\tfloat blend = smoothstep(0.,1.,absorption*distanceInsideMedium);\n\treturn vec3(\n\t\tmix(refractedDataColor.r, refractedDataColor.r*tint.r, blend),\n\t\tmix(refractedDataColor.g, refractedDataColor.g*tint.g, blend),\n\t\tmix(refractedDataColor.b, refractedDataColor.b*tint.b, blend)\n\t);\n}\n\n#endif\n\nvec3 applyMaterial(vec3 p, vec3 n, vec3 rayDir, int mat){\n\n\tvec3 col = vec3(0.);\n\t// start applyMaterial builder body code\n\n\n\n\t// /ink/MAT/rayMarchingBuilder1/constant1\n\tvec3 v_POLY_constant1_val = vec3(1.0, 1.0, 1.0);\n\t\n\t// /ink/MAT/rayMarchingBuilder1/SDFMaterial1\n\tif(mat == _INK_MAT_RAYMARCHINGBUILDER1_SDFMATERIAL1){\n\t\tcol = v_POLY_constant1_val;\n\t\tvec3 diffuse = GetLight(p, n);\n\t\tcol *= diffuse;\n\t\tvec3 rayDir = normalize(reflect(rayDir, n));\n\t\tEnvMap envMap;\n\t\tenvMap.tint = vec3(1.0, 1.0, 1.0);\n\t\tenvMap.intensity = 1.0;\n\t\tenvMap.fresnel = 1.0;\n\t\tenvMap.fresnelPower = 2.6;\n\t\tcol += envMapSampleWithFresnel(rayDir, v_POLY_texture_envTexture1, envMap, n, cameraPosition);\n\t}\n\n\n\n\t\n\treturn col;\n}\n\n\n\n\nvec4 applyShading(vec3 rayOrigin, vec3 rayDir, SDFContext sdfContext){\n\tvec3 p = rayOrigin + rayDir * sdfContext.d;\n\tvec3 n = GetNormal(p);\n\t\n\n\tvec3 col = applyMaterial(p, n, rayDir, sdfContext.matId);\n\t\t\n\t// gamma\n\tcol = pow( col, vec3(0.4545) ); \n\treturn vec4(col, 1.);\n}\n\nvoid main()\t{\n\n\tvec3 rayDir = normalize(vPw - cameraPosition);\n\tvec3 rayOrigin = cameraPosition - CENTER;\n\n\tSDFContext sdfContext = RayMarch(rayOrigin, rayDir, 1.);\n\n\tgl_FragColor = vec4(0.);\n\tif( sdfContext.d >= MAX_DIST ){ discard; }\n\tgl_FragColor = applyShading(rayOrigin, rayDir, sdfContext);\n}"}}};
	return loadScene_scene_01(options);
};
