import { ParamValueSerializedTypeMap } from "@polygonjs/polygonjs/dist/src/engine/params/types/ParamValueSerializedTypeMap";

import { PolyScene } from "@polygonjs/polygonjs/dist/src/engine/scene/PolyScene";
// obj
import { GeoObjNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo";
// sop
import { CameraControlsSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/CameraControls";
import { MergeSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Merge";
import { PerspectiveCameraSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PerspectiveCamera";
import { PolarTransformSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/PolarTransform";
import { SphereSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/Sphere";
import { SpotLightSopNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/sop/SpotLight";
// event
import { CameraOrbitControlsEventNode } from "@polygonjs/polygonjs/dist/src/engine/nodes/event/CameraOrbitControls";

export class PolySceneWithNodeMap_lavalamp_01 extends PolyScene {
  node(path: "/lavalamp"): GeoObjNode;
  node(path: "/lavalamp/sphere1"): SphereSopNode;
  node(path: "/cameras"): GeoObjNode;
  node(path: "/cameras/perspectiveCamera_MAIN"): PerspectiveCameraSopNode;
  node(path: "/cameras/cameraControls1"): CameraControlsSopNode;
  node(
    path: "/cameras/cameraControls1/cameraOrbitControls1"
  ): CameraOrbitControlsEventNode;
  node(path: "/cameras/perspectiveCamera_DEBUG"): PerspectiveCameraSopNode;
  node(path: "/cameras/merge1"): MergeSopNode;
  node(path: "/lights"): GeoObjNode;
  node(path: "/lights/spotLight1"): SpotLightSopNode;
  node(path: "/lights/polarTransform1"): PolarTransformSopNode;
  node(path: "/lights/spotLight2"): SpotLightSopNode;
  node(path: "/lights/polarTransform2"): PolarTransformSopNode;
  node(path: "/lights/merge1"): MergeSopNode;
  node(
    path: string
  ): any /* we need any for now as otherwise an error occurs when adding plugins to the overloaded methods */ {
    return super.node(path);
  }
}

export interface PolySceneProps_lavalamp_01 {
  "lavalamp--transform"?: ParamValueSerializedTypeMap["folder"];
  "lavalamp--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lavalamp--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lavalamp--t"?: ParamValueSerializedTypeMap["vector3"];
  "lavalamp--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--tx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--ty"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--tz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--r"?: ParamValueSerializedTypeMap["vector3"];
  "lavalamp--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--rx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--ry"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--rz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--s"?: ParamValueSerializedTypeMap["vector3"];
  "lavalamp--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--sx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--sy"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--sz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--scale"?: ParamValueSerializedTypeMap["float"];
  "lavalamp--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lavalamp--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lavalamp--display"?: ParamValueSerializedTypeMap["boolean"];
  "lavalamp--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lavalamp-sphere1--type"?: ParamValueSerializedTypeMap["integer"];
  "lavalamp-sphere1--radius"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--resolution"?: ParamValueSerializedTypeMap["vector2"];
  "lavalamp-sphere1--resolution-resolutionx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--resolution-resolutiony"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--resolutionx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--resolutiony"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--open"?: ParamValueSerializedTypeMap["boolean"];
  "lavalamp-sphere1--phiStart"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--phiLength"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--thetaStart"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--thetaLength"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--detail"?: ParamValueSerializedTypeMap["integer"];
  "lavalamp-sphere1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lavalamp-sphere1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--centery"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lavalamp-sphere1--asLines"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--transform"?: ParamValueSerializedTypeMap["folder"];
  "cameras--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras--t"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--t-tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--t-tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--tx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ty"?: ParamValueSerializedTypeMap["float"];
  "cameras--tz"?: ParamValueSerializedTypeMap["float"];
  "cameras--r"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--r-rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--r-rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--rx"?: ParamValueSerializedTypeMap["float"];
  "cameras--ry"?: ParamValueSerializedTypeMap["float"];
  "cameras--rz"?: ParamValueSerializedTypeMap["float"];
  "cameras--s"?: ParamValueSerializedTypeMap["vector3"];
  "cameras--s-sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--s-sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--sx"?: ParamValueSerializedTypeMap["float"];
  "cameras--sy"?: ParamValueSerializedTypeMap["float"];
  "cameras--sz"?: ParamValueSerializedTypeMap["float"];
  "cameras--scale"?: ParamValueSerializedTypeMap["float"];
  "cameras--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "cameras--display"?: ParamValueSerializedTypeMap["boolean"];
  "cameras--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "cameras-perspectiveCamera_MAIN--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_MAIN--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_MAIN--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_MAIN--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_MAIN--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_MAIN--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-cameraControls1--node"?: ParamValueSerializedTypeMap["node_path"];
  "cameras-cameraControls1-cameraOrbitControls1--enabled"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowPan"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowRotate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--allowZoom"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--tdamping"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--damping"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--screenSpacePanning"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--rotateSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--minDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--maxDistance"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--limitAzimuthAngle"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRange-azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--azimuthAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange"?: ParamValueSerializedTypeMap["vector2"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRange-polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangex"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--polarAngleRangey"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--target-targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetx"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targety"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--targetz"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--enableKeys"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-cameraControls1-cameraOrbitControls1--keysMode"?: ParamValueSerializedTypeMap["integer"];
  "cameras-cameraControls1-cameraOrbitControls1--keysPanSpeed"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--keysRotateSpeedVertical"?: ParamValueSerializedTypeMap["float"];
  "cameras-cameraControls1-cameraOrbitControls1--keysRotateSpeedHorizontal"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--fov"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--near"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--far"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_DEBUG--position-positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position-positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--position-positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positionx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positiony"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--positionz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation"?: ParamValueSerializedTypeMap["vector3"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotation-rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationx"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationy"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--rotationz"?: ParamValueSerializedTypeMap["float"];
  "cameras-perspectiveCamera_DEBUG--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_DEBUG--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-perspectiveCamera_DEBUG--name"?: ParamValueSerializedTypeMap["string"];
  "cameras-perspectiveCamera_DEBUG--setMainCamera"?: ParamValueSerializedTypeMap["button"];
  "cameras-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "cameras-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
  "lights--transform"?: ParamValueSerializedTypeMap["folder"];
  "lights--keepPosWhenParenting"?: ParamValueSerializedTypeMap["boolean"];
  "lights--rotationOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights--t"?: ParamValueSerializedTypeMap["vector3"];
  "lights--t-tx"?: ParamValueSerializedTypeMap["float"];
  "lights--t-ty"?: ParamValueSerializedTypeMap["float"];
  "lights--t-tz"?: ParamValueSerializedTypeMap["float"];
  "lights--tx"?: ParamValueSerializedTypeMap["float"];
  "lights--ty"?: ParamValueSerializedTypeMap["float"];
  "lights--tz"?: ParamValueSerializedTypeMap["float"];
  "lights--r"?: ParamValueSerializedTypeMap["vector3"];
  "lights--r-rx"?: ParamValueSerializedTypeMap["float"];
  "lights--r-ry"?: ParamValueSerializedTypeMap["float"];
  "lights--r-rz"?: ParamValueSerializedTypeMap["float"];
  "lights--rx"?: ParamValueSerializedTypeMap["float"];
  "lights--ry"?: ParamValueSerializedTypeMap["float"];
  "lights--rz"?: ParamValueSerializedTypeMap["float"];
  "lights--s"?: ParamValueSerializedTypeMap["vector3"];
  "lights--s-sx"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sy"?: ParamValueSerializedTypeMap["float"];
  "lights--s-sz"?: ParamValueSerializedTypeMap["float"];
  "lights--sx"?: ParamValueSerializedTypeMap["float"];
  "lights--sy"?: ParamValueSerializedTypeMap["float"];
  "lights--sz"?: ParamValueSerializedTypeMap["float"];
  "lights--scale"?: ParamValueSerializedTypeMap["float"];
  "lights--matrixAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights--updateTransformFromObject"?: ParamValueSerializedTypeMap["button"];
  "lights--display"?: ParamValueSerializedTypeMap["boolean"];
  "lights--renderOrder"?: ParamValueSerializedTypeMap["integer"];
  "lights-spotLight1--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight1--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight1--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight1--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight1--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight1--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight1--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform1--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform1--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform1--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--light"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight2--color"?: ParamValueSerializedTypeMap["color"];
  "lights-spotLight2--color-colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--color-colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--color-colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--colorr"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--colorg"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--colorb"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--intensity"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--angle"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--penumbra"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--decay"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--distance"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--showHelper"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight2--helperSize"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--name"?: ParamValueSerializedTypeMap["string"];
  "lights-spotLight2--shadow"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight2--castShadow"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight2--shadowAutoUpdate"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight2--shadowUpdateOnNextRender"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight2--shadowRes"?: ParamValueSerializedTypeMap["vector2"];
  "lights-spotLight2--shadowRes-shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowRes-shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowResx"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowResy"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowBias"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowNear"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowFar"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--shadowRadius"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--volumetric"?: ParamValueSerializedTypeMap["folder"];
  "lights-spotLight2--tvolumetric"?: ParamValueSerializedTypeMap["boolean"];
  "lights-spotLight2--volAttenuation"?: ParamValueSerializedTypeMap["float"];
  "lights-spotLight2--volAnglePower"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--applyOn"?: ParamValueSerializedTypeMap["integer"];
  "lights-polarTransform2--center"?: ParamValueSerializedTypeMap["vector3"];
  "lights-polarTransform2--center-centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--center-centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--center-centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centerx"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centery"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--centerz"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--longitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--latitude"?: ParamValueSerializedTypeMap["float"];
  "lights-polarTransform2--depth"?: ParamValueSerializedTypeMap["float"];
  "lights-merge1--compact"?: ParamValueSerializedTypeMap["boolean"];
  "lights-merge1--inputsCount"?: ParamValueSerializedTypeMap["integer"];
}
